'use client';

import { useState } from 'react';
import { useDropzone, FileRejection } from 'react-dropzone';
import { FiUpload, FiLoader, FiCheck, FiX } from 'react-icons/fi';

interface Question {
  question: string;
  options: string[];
  correctAnswer: string;
}

export default function Home() {
  const [file, setFile] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [questions, setQuestions] = useState<Question[]>([]);
  const [selectedAnswers, setSelectedAnswers] = useState<{ [key: number]: string }>({});
  const [showResults, setShowResults] = useState(false);
  const [score, setScore] = useState(0);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    accept: {
      'application/pdf': ['.pdf']
    },
    maxFiles: 1,
    onDrop: (acceptedFiles: File[], fileRejections: FileRejection[]) => {
      if (fileRejections.length > 0) {
        setError('Please upload a valid PDF file');
        return;
      }
      setFile(acceptedFiles[0]);
      setError(null);
      setQuestions([]);
      setSelectedAnswers({});
      setShowResults(false);
      setScore(0);
    }
  });

  const generateQuiz = async () => {
    if (!file) {
      setError('Please upload a PDF file first');
      return;
    }

    setLoading(true);
    setError(null);
    setQuestions([]);
    setSelectedAnswers({});
    setShowResults(false);
    setScore(0);

    try {
      const formData = new FormData();
      formData.append('file', file);

      console.log('Sending request to API...');
      const response = await fetch('/api/quiz', {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json',
        },
      });

      console.log('Response status:', response.status);
      console.log('Response headers:', Object.fromEntries(response.headers.entries()));
      console.log('Response URL:', response.url);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Error response:', errorText);
        console.error('Response URL:', response.url);
        console.error('Response status:', response.status);
        console.error('Response status text:', response.statusText);
        throw new Error(`Server error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log('Response data:', data);

      if (!data.questions || !Array.isArray(data.questions)) {
        console.error('Invalid response format:', data);
        throw new Error('Invalid response format from server');
      }

      // Validate each question has the required fields
      const validQuestions = data.questions.every((q: Question) => 
        q.question && 
        Array.isArray(q.options) && 
        q.options.length === 4 && 
        typeof q.correctAnswer === 'string' &&
        q.options.includes(q.correctAnswer)
      );

      if (!validQuestions) {
        console.error('Invalid question format:', data.questions);
        throw new Error('Invalid question format in response');
      }

      setQuestions(data.questions);
    } catch (error) {
      console.error('Error generating quiz:', error);
      setError(error instanceof Error ? error.message : 'Failed to generate quiz');
    } finally {
      setLoading(false);
    }
  };

  const handleAnswerSelect = (questionIndex: number, answer: string) => {
    setSelectedAnswers(prev => {
      const newAnswers = {
        ...prev,
        [questionIndex]: answer
      };

      // Calculate score immediately
      const newScore = questions.reduce((score, question, index) => {
        return score + (newAnswers[index] === question.correctAnswer ? 1 : 0);
      }, 0);
      setScore(newScore);

      return newAnswers;
    });
  };

  const isAnswerCorrect = (questionIndex: number, answer: string) => {
    return answer === questions[questionIndex].correctAnswer;
  };

  return (
    <main className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto px-4 py-8">
        <h1 className="text-4xl font-bold text-center mb-8 text-gray-900">
          AI Quizzer
        </h1>
        <p className="text-center text-gray-600 mb-8">
          Upload any PDF and get an instant quiz generated by AI
        </p>

        <div className="bg-white rounded-lg shadow-md p-6 mb-8">
          <div
            {...getRootProps()}
            className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${
              isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-500'
            }`}
          >
            <input {...getInputProps()} />
            <FiUpload className="mx-auto h-12 w-12 text-gray-400" />
            <p className="mt-2 text-sm text-gray-600">
              {isDragActive
                ? 'Drop the PDF here'
                : 'Drag and drop a PDF file here, or click to select'}
            </p>
          </div>

          {file && (
            <div className="mt-4 text-sm text-gray-600">
              Selected file: {file.name}
            </div>
          )}

          <button
            onClick={generateQuiz}
            disabled={!file || loading}
            className={`mt-4 w-full py-2 px-4 rounded-md text-white font-medium ${
              !file || loading
                ? 'bg-gray-400 cursor-not-allowed'
                : 'bg-blue-600 hover:bg-blue-700'
            }`}
          >
            {loading ? (
              <span className="flex items-center justify-center">
                <FiLoader className="animate-spin mr-2" />
                Generating Quiz...
              </span>
            ) : (
              'Generate Quiz'
            )}
          </button>

          {error && (
            <div className="mt-4 p-4 bg-red-50 text-red-700 rounded-md">
              {error}
            </div>
          )}
        </div>

        {questions.length > 0 && (
          <div className="bg-white rounded-lg shadow-md p-6">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-semibold text-gray-900">Quiz</h2>
              <div className="text-lg font-medium text-gray-900">
                Score: {score} / {questions.length}
              </div>
            </div>
            <div className="space-y-8">
              {questions.map((question, index) => (
                <div key={index} className="border-b border-gray-200 pb-6">
                  <p className="text-lg font-medium mb-4 text-gray-900">
                    {index + 1}. {question.question}
                  </p>
                  <div className="space-y-2">
                    {question.options.map((option, optionIndex) => {
                      const isSelected = selectedAnswers[index] === option;
                      const isCorrect = isSelected && isAnswerCorrect(index, option);
                      const isWrong = isSelected && !isCorrect;
                      
                      return (
                        <label
                          key={optionIndex}
                          className={`flex items-center p-3 rounded-md cursor-pointer transition-colors ${
                            isSelected
                              ? isCorrect
                                ? 'bg-green-50 border-green-500'
                                : 'bg-red-50 border-red-500'
                              : 'bg-gray-50 hover:bg-gray-100 border-gray-200'
                          } border`}
                        >
                          <input
                            type="radio"
                            name={`question-${index}`}
                            value={option}
                            checked={isSelected}
                            onChange={() => handleAnswerSelect(index, option)}
                            className="mr-3"
                          />
                          <span className="text-gray-700 flex-grow">{option}</span>
                          {isSelected && (
                            <span className="ml-2">
                              {isCorrect ? (
                                <FiCheck className="text-green-500" />
                              ) : (
                                <FiX className="text-red-500" />
                              )}
                            </span>
                          )}
                        </label>
                      );
                    })}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </main>
  );
} 